name: Release

on:
  push:
    tags:
      - 'v*'

env:
  NODE_VERSION: '18'

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Generate changelog
        id: changelog
        run: |
          # Extract version from tag
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
          # Generate changelog
          npx conventional-changelog-cli@latest --version $VERSION --infile CHANGELOG.md --same-file --preset angular

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            ## What's Changed
            
            ${{ steps.changelog.outputs.changelog }}
            
            ## Installation
            
            ```bash
            npm install devvscape-code-humor@${{ github.ref }}
            ```
            
            ## Downloads
            
            - [Web Version](https://devvscape.com)
            - [Android APK](https://play.google.com/store/apps/details?id=com.silkwebhq.devvscapecode)
            
            ## Support
            
            If you encounter any issues, please:
            - Check our [Documentation](https://docs.devvscape.com)
            - Join our [Discord Community](https://discord.gg/devvscape)
            - Open an [Issue](https://github.com/${{ github.repository }}/issues)
          draft: false
          prerelease: false

      - name: Upload build artifacts
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./www/
          asset_name: devvscape-web-${{ github.ref }}.zip
          asset_content_type: application/zip

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: release
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build for production
        run: npm run build -- --configuration production

      - name: Deploy to Firebase Hosting
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_DEVVESC_C43F9 }}
          channelId: live
          projectId: devvesc-c43f9

      - name: Deploy to Google Play Store
        if: contains(github.ref, 'v')
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJsonPlainText: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT }}
          packageName: com.silkwebhq.devvscapecode
          releaseFiles: android/app/build/outputs/apk/release/app-release.apk
          track: production

  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [release, deploy-production]
    if: always()
    steps:
      - name: Notify Discord
        uses: sarisia/actions-status-discord@v1
        if: needs.deploy-production.result == 'success'
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          status: success
          title: 'üöÄ New Release Deployed!'
          description: |
            **Version:** ${{ github.ref }}
            **Repository:** ${{ github.repository }}
            **Deployed by:** ${{ github.actor }}
            
            [View Release](https://github.com/${{ github.repository }}/releases/tag/${{ github.ref }})

      - name: Notify on Failure
        uses: sarisia/actions-status-discord@v1
        if: needs.deploy-production.result == 'failure'
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          status: failure
          title: '‚ùå Release Deployment Failed'
          description: |
            **Version:** ${{ github.ref }}
            **Repository:** ${{ github.repository }}
            **Failed by:** ${{ github.actor }}
            
            [View Actions](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) 